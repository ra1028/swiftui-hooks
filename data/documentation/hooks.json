{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI Hooks is a SwiftUI implementation of React Hooks. Brings the state and lifecycle into the function view, without depending on elements that are only allowed to be used in struct views such as @State or @ObservedObject."},{"type":"text","text":" "},{"type":"text","text":"It allows you to reuse stateful logic between views by building custom hooks composed with multiple hooks."},{"type":"text","text":" "},{"type":"text","text":"Furthermore, hooks such as useEffect also solve the problem of lack of lifecycles in SwiftUI."}]},{"anchor":"Source-Code","level":2,"type":"heading","text":"Source Code"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/ra1028\/swiftui-hooks"}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/hooks"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Hooks\/documentation\/Hooks","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"ü™ù A SwiftUI implementation of React Hooks. Enhances reusability of stateful logic and gives state and lifecycle to function view."}],"kind":"symbol","metadata":{"roleHeading":"Framework","externalID":"Hooks","title":"Hooks","symbolKind":"module","role":"collection","modules":[{"name":"Hooks"}]},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Hooks","identifiers":["doc:\/\/Hooks\/documentation\/Hooks\/useState(_:)-52rjz","doc:\/\/Hooks\/documentation\/Hooks\/useState(_:)-jg02","doc:\/\/Hooks\/documentation\/Hooks\/useEffect(_:_:)","doc:\/\/Hooks\/documentation\/Hooks\/useLayoutEffect(_:_:)","doc:\/\/Hooks\/documentation\/Hooks\/useMemo(_:_:)","doc:\/\/Hooks\/documentation\/Hooks\/useRef(_:)","doc:\/\/Hooks\/documentation\/Hooks\/useReducer(_:initialState:)","doc:\/\/Hooks\/documentation\/Hooks\/useEnvironment(_:)","doc:\/\/Hooks\/documentation\/Hooks\/useAsync(_:_:)-14qp9","doc:\/\/Hooks\/documentation\/Hooks\/useAsync(_:_:)-cow","doc:\/\/Hooks\/documentation\/Hooks\/useAsyncPerform(_:)-6w8mq","doc:\/\/Hooks\/documentation\/Hooks\/useAsyncPerform(_:)-5qq2h","doc:\/\/Hooks\/documentation\/Hooks\/usePublisher(_:_:)","doc:\/\/Hooks\/documentation\/Hooks\/usePublisherSubscribe(_:)","doc:\/\/Hooks\/documentation\/Hooks\/useContext(_:)"]},{"title":"User Interface","identifiers":["doc:\/\/Hooks\/documentation\/Hooks\/HookScope","doc:\/\/Hooks\/documentation\/Hooks\/HookView"]},{"title":"Values","identifiers":["doc:\/\/Hooks\/documentation\/Hooks\/Context","doc:\/\/Hooks\/documentation\/Hooks\/AsyncPhase","doc:\/\/Hooks\/documentation\/Hooks\/RefObject","doc:\/\/Hooks\/documentation\/Hooks\/HookUpdateStrategy"]},{"title":"Testing","identifiers":["doc:\/\/Hooks\/documentation\/Hooks\/HookTester"]},{"title":"Internal System","identifiers":["doc:\/\/Hooks\/documentation\/Hooks\/useHook(_:)","doc:\/\/Hooks\/documentation\/Hooks\/Hook","doc:\/\/Hooks\/documentation\/Hooks\/HookCoordinator","doc:\/\/Hooks\/documentation\/Hooks\/HookDispatcher"]}],"references":{"doc://Hooks/documentation/Hooks/usePublisher(_:_:)":{"role":"symbol","title":"usePublisher(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"usePublisher"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"HookUpdateStrategy","preciseIdentifier":"s:5Hooks18HookUpdateStrategyV"},{"kind":"text","text":", () -> "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AsyncPhase","preciseIdentifier":"s:5Hooks10AsyncPhaseO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A hook to use the most recent phase of asynchronous operation of the passed publisher."},{"type":"text","text":" "},{"type":"text","text":"The publisher will be subscribed at the first update and will be re-subscribed according to the given "},{"type":"codeVoice","code":"updateStrategy"},{"type":"text","text":"."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/usePublisher(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/usepublisher(_:_:)"},"doc://Hooks/documentation/Hooks/HookDispatcher":{"role":"symbol","title":"HookDispatcher","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HookDispatcher"}],"abstract":[{"type":"text","text":"A class that manages list of states of hooks used inside "},{"type":"codeVoice","code":"HookDispatcher.scoped(environment:_)"},{"type":"text","text":"."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/HookDispatcher","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HookDispatcher"}],"url":"\/documentation\/hooks\/hookdispatcher"},"doc://Hooks/documentation/Hooks/usePublisherSubscribe(_:)":{"role":"symbol","title":"usePublisherSubscribe(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"usePublisherSubscribe"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":">(() -> "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> (phase"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncPhase","preciseIdentifier":"s:5Hooks10AsyncPhaseO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">, subscribe"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A hook to use the most recent phase of asynchronous operation of the passed publisher, and a "},{"type":"codeVoice","code":"subscribe"},{"type":"text","text":" function to subscribe to it at arbitrary timing."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/usePublisherSubscribe(_:)","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/usepublishersubscribe(_:)"},"doc://Hooks/documentation/Hooks/useState(_:)-jg02":{"role":"symbol","title":"useState(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useState"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":">(() -> "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A hook to use a "},{"type":"codeVoice","code":"Binding<State>"},{"type":"text","text":" wrapping current state to be updated by setting a new state to "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Triggers a view update when the state has been changed."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useState(_:)-jg02","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/usestate(_:)-jg02"},"doc://Hooks/documentation/Hooks/useEffect(_:_:)":{"role":"symbol","title":"useEffect(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useEffect"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"HookUpdateStrategy","preciseIdentifier":"s:5Hooks18HookUpdateStrategyV"},{"kind":"text","text":"?, () -> (() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?)"}],"abstract":[{"type":"text","text":"A hook to use a side effect function that is called the number of times according to the strategy specified with "},{"type":"codeVoice","code":"updateStrategy"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Optionally the function can be cancelled when this hook is disposed or when the side-effect function is called again."},{"type":"text","text":" "},{"type":"text","text":"Note that the execution is deferred until after ohter hooks have been updated."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useEffect(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/useeffect(_:_:)"},"doc://Hooks/documentation/Hooks/useLayoutEffect(_:_:)":{"role":"symbol","title":"useLayoutEffect(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useLayoutEffect"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"HookUpdateStrategy","preciseIdentifier":"s:5Hooks18HookUpdateStrategyV"},{"kind":"text","text":"?, () -> (() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?)"}],"abstract":[{"type":"text","text":"A hook to use a side effect function that is called the number of times according to the strategy specified with "},{"type":"codeVoice","code":"updateStrategy"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Optionally the function can be cancelled when this hook is unmount from the view tree or when the side-effect function is called again."},{"type":"text","text":" "},{"type":"text","text":"The signature is identical to "},{"type":"codeVoice","code":"useEffect"},{"type":"text","text":", but this fires synchronously when the hook is called."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useLayoutEffect(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/uselayouteffect(_:_:)"},"doc://Hooks/documentation/Hooks/HookScope":{"role":"symbol","title":"HookScope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HookScope"}],"abstract":[{"type":"text","text":"A view that hosts the state of hooks."},{"type":"text","text":" "},{"type":"text","text":"All hooks should be called within the evaluation of this view‚Äôs body."},{"type":"text","text":" "},{"type":"text","text":"The state of hooks are hosted by this view, and changes in state will cause re-evaluation the body of this view."},{"type":"text","text":" "},{"type":"text","text":"It is possible to limit the scope of re-evaluation by wrapping the views that use hooks in a "},{"type":"codeVoice","code":"HookScope"},{"type":"text","text":"."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/HookScope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HookScope"}],"url":"\/documentation\/hooks\/hookscope"},"doc://Hooks/documentation/Hooks/useEnvironment(_:)":{"role":"symbol","title":"useEnvironment(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useEnvironment"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"EnvironmentValues","preciseIdentifier":"s:7SwiftUI17EnvironmentValuesV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"A hook to use environment value passed through the view tree without "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":" property wrapper."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useEnvironment(_:)","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/useenvironment(_:)"},"doc://Hooks/documentation/Hooks/useHook(_:)":{"role":"symbol","title":"useHook(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useHook"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"H"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"H"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"H"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"Register the hook to the view and returns its value."},{"type":"text","text":" "},{"type":"text","text":"Must be called at the function top level within scope of the "},{"type":"codeVoice","code":"HookScope"},{"type":"text","text":" or the HookView.hookBody`."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useHook(_:)","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/usehook(_:)"},"doc://Hooks/documentation/Hooks/Context":{"role":"symbol","title":"Context","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Context"}],"abstract":[{"type":"text","text":"A type of context that to identify the context values."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/Context","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Context"}],"url":"\/documentation\/hooks\/context"},"doc://Hooks/documentation/Hooks":{"role":"collection","title":"Hooks","abstract":[{"type":"text","text":"ü™ù A SwiftUI implementation of React Hooks. Enhances reusability of stateful logic and gives state and lifecycle to function view."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks","kind":"symbol","type":"topic","url":"\/documentation\/hooks"},"doc://Hooks/documentation/Hooks/RefObject":{"role":"symbol","title":"RefObject","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RefObject"}],"abstract":[{"type":"text","text":"A mutable object that referencing a value."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/RefObject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RefObject"}],"url":"\/documentation\/hooks\/refobject"},"doc://Hooks/documentation/Hooks/HookUpdateStrategy":{"role":"symbol","title":"HookUpdateStrategy","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HookUpdateStrategy"}],"abstract":[{"type":"text","text":"Represents a strategy that determines when to update the state of hooks."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/HookUpdateStrategy","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HookUpdateStrategy"}],"url":"\/documentation\/hooks\/hookupdatestrategy"},"doc://Hooks/documentation/Hooks/AsyncPhase":{"role":"symbol","title":"AsyncPhase","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncPhase"}],"abstract":[{"type":"text","text":"An immutable representation of the most recent asynchronous operation phase."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/AsyncPhase","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncPhase"}],"url":"\/documentation\/hooks\/asyncphase"},"doc://Hooks/documentation/Hooks/useReducer(_:initialState:)":{"role":"symbol","title":"useReducer(_:initialState:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useReducer"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"externalParam","text":"initialState"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> (state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", dispatch"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A hook to use the state returned by the passed "},{"type":"codeVoice","code":"reducer"},{"type":"text","text":", and a "},{"type":"codeVoice","code":"dispatch"},{"type":"text","text":" function to send actions to update the state."},{"type":"text","text":" "},{"type":"text","text":"Triggers a view update when the state has been changed."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useReducer(_:initialState:)","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/usereducer(_:initialstate:)"},"doc://Hooks/documentation/Hooks/useContext(_:)":{"role":"symbol","title":"useContext(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useContext"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Context","preciseIdentifier":"s:5Hooks7ContextO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">.Type) -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"A hook to use current context value that is provided by "},{"type":"codeVoice","code":"Context<T>.Provider"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The purpose is identical to use "},{"type":"codeVoice","code":"Context<T>.Consumer"},{"type":"text","text":"."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useContext(_:)","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/usecontext(_:)"},"doc://Hooks/documentation/Hooks/HookTester":{"role":"symbol","title":"HookTester","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HookTester"}],"abstract":[{"type":"text","text":"A testing tool that simulates the behaviors on a view of a given hook"},{"type":"text","text":" "},{"type":"text","text":"and manages the resulting values."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/HookTester","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HookTester"}],"url":"\/documentation\/hooks\/hooktester"},"doc://Hooks/documentation/Hooks/useMemo(_:_:)":{"role":"symbol","title":"useMemo(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useMemo"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"HookUpdateStrategy","preciseIdentifier":"s:5Hooks18HookUpdateStrategyV"},{"kind":"text","text":", () -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"A hook to use memoized value preserved until it is updated at the timing determined with given "},{"type":"codeVoice","code":"updateStrategy"},{"type":"text","text":"."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useMemo(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/usememo(_:_:)"},"doc://Hooks/documentation/Hooks/useAsync(_:_:)-cow":{"role":"symbol","title":"useAsync(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useAsync"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"HookUpdateStrategy","preciseIdentifier":"s:5Hooks18HookUpdateStrategyV"},{"kind":"text","text":", () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AsyncPhase","preciseIdentifier":"s:5Hooks10AsyncPhaseO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A hook to use the most recent phase of asynchronous operation of the passed throwing function."},{"type":"text","text":" "},{"type":"text","text":"The function will be performed at the first update and will be re-performed according to the given "},{"type":"codeVoice","code":"updateStrategy"},{"type":"text","text":"."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useAsync(_:_:)-cow","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/useasync(_:_:)-cow"},"doc://Hooks/documentation/Hooks/Hook":{"role":"symbol","title":"Hook","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Hook"}],"abstract":[{"type":"codeVoice","code":"Hook"},{"type":"text","text":" manages the state and overall behavior of a hook. It has lifecycles to manage the state and when to update the value."},{"type":"text","text":" "},{"type":"text","text":"It must be immutable, and should not have any state in itself, but should perform appropriate operations on the state managed by the internal system passed to lifecycle functions."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/Hook","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Hook"}],"url":"\/documentation\/hooks\/hook"},"doc://Hooks/documentation/Hooks/useAsync(_:_:)-14qp9":{"role":"symbol","title":"useAsync(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useAsync"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"HookUpdateStrategy","preciseIdentifier":"s:5Hooks18HookUpdateStrategyV"},{"kind":"text","text":", () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AsyncPhase","preciseIdentifier":"s:5Hooks10AsyncPhaseO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A hook to use the most recent phase of asynchronous operation of the passed non-throwing function."},{"type":"text","text":" "},{"type":"text","text":"The function will be performed at the first update and will be re-performed according to the given "},{"type":"codeVoice","code":"updateStrategy"},{"type":"text","text":"."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useAsync(_:_:)-14qp9","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/useasync(_:_:)-14qp9"},"doc://Hooks/documentation/Hooks/HookCoordinator":{"role":"symbol","title":"HookCoordinator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HookCoordinator"}],"abstract":[{"type":"text","text":"Contextual information about the state of the hook."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/HookCoordinator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HookCoordinator"}],"url":"\/documentation\/hooks\/hookcoordinator"},"doc://Hooks/documentation/Hooks/HookView":{"role":"symbol","title":"HookView","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HookView"}],"abstract":[{"type":"text","text":"A view that wrapper around the "},{"type":"codeVoice","code":"HookScope"},{"type":"text","text":" to use hooks inside."},{"type":"text","text":" "},{"type":"text","text":"The view that is returned from "},{"type":"codeVoice","code":"hookBody"},{"type":"text","text":" will be encluded with "},{"type":"codeVoice","code":"HookScope"},{"type":"text","text":" and be able to use hooks."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/HookView","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HookView"}],"url":"\/documentation\/hooks\/hookview"},"doc://Hooks/documentation/Hooks/useAsyncPerform(_:)-6w8mq":{"role":"symbol","title":"useAsyncPerform(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useAsyncPerform"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">(() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> (phase"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncPhase","preciseIdentifier":"s:5Hooks10AsyncPhaseO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"kind":"text","text":">, perform"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A hook to use the most recent phase of the passed non-throwing asynchronous operation, and a "},{"type":"codeVoice","code":"perform"},{"type":"text","text":" function to call the it at arbitrary timing."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useAsyncPerform(_:)-6w8mq","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/useasyncperform(_:)-6w8mq"},"https://github.com/ra1028/swiftui-hooks":{"title":"https:\/\/github.com\/ra1028\/swiftui-hooks","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/ra1028\/swiftui-hooks"}],"type":"link","identifier":"https:\/\/github.com\/ra1028\/swiftui-hooks","url":"https:\/\/github.com\/ra1028\/swiftui-hooks"},"doc://Hooks/documentation/Hooks/useAsyncPerform(_:)-5qq2h":{"role":"symbol","title":"useAsyncPerform(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useAsyncPerform"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">(() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> (phase"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AsyncPhase","preciseIdentifier":"s:5Hooks10AsyncPhaseO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":">, perform"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A hook to use the most recent phase of the passed throwing asynchronous operation, and a "},{"type":"codeVoice","code":"perform"},{"type":"text","text":" function to call the it at arbitrary timing."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useAsyncPerform(_:)-5qq2h","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/useasyncperform(_:)-5qq2h"},"doc://Hooks/documentation/Hooks/useState(_:)-52rjz":{"role":"symbol","title":"useState(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useState"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A hook to use a "},{"type":"codeVoice","code":"Binding<State>"},{"type":"text","text":" wrapping current state to be updated by setting a new state to "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Triggers a view update when the state has been changed."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useState(_:)-52rjz","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/usestate(_:)-52rjz"},"doc://Hooks/documentation/Hooks/useRef(_:)":{"role":"symbol","title":"useRef(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"useRef"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"RefObject","preciseIdentifier":"s:5Hooks9RefObjectC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A hook to use a mutable ref object storing an arbitrary value."},{"type":"text","text":" "},{"type":"text","text":"The essential of this hook is that setting a value to "},{"type":"codeVoice","code":"current"},{"type":"text","text":" doesn‚Äôt trigger a view update."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/useRef(_:)","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/useref(_:)"}}}