{"seeAlsoSections":[{"title":"User Interface","identifiers":["doc:\/\/Hooks\/documentation\/Hooks\/HookView"],"generated":true}],"schemaVersion":{"major":0,"minor":2,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HookScope"}],"title":"HookScope","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:5Hooks9HookScopeV","modules":[{"name":"Hooks"}],"navigatorTitle":[{"kind":"identifier","text":"HookScope"}]},"abstract":[{"type":"text","text":"A view that hosts the state of hooks."},{"type":"text","text":" "},{"type":"text","text":"All hooks should be called within the evaluation of this view’s body."},{"type":"text","text":" "},{"type":"text","text":"The state of hooks are hosted by this view, and changes in state will cause re-evaluation the body of this view."},{"type":"text","text":" "},{"type":"text","text":"It is possible to limit the scope of re-evaluation by wrapping the views that use hooks in a "},{"type":"codeVoice","code":"HookScope"},{"type":"text","text":"."}],"sections":[],"identifier":{"url":"doc:\/\/Hooks\/documentation\/Hooks\/HookScope","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/Hooks\/7SwiftUI4ViewP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/Hooks\/documentation\/Hooks"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Hooks\/documentation\/Hooks\/HookScope\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Hooks\/documentation\/Hooks\/HookScope\/body"]},{"title":"Default Implementations","identifiers":["doc:\/\/Hooks\/documentation\/Hooks\/HookScope\/View-Implementations"],"generated":true}],"variants":[{"paths":["\/documentation\/hooks\/hookscope"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HookScope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Content"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"codeListing","syntax":null,"code":["struct ContentView: View {","    var body: some View {","        HookScope {","            let count = useState(0)","","            Button(\"\\(count.wrappedValue)\") {","                count.wrappedValue += 1","            }","        }","    }","}"]}]}],"references":{"doc://Hooks/7SwiftUI4ViewP":{"type":"unresolvable","title":"SwiftUI.View","identifier":"doc:\/\/Hooks\/7SwiftUI4ViewP"},"doc://Hooks/documentation/Hooks":{"role":"collection","title":"Hooks","abstract":[{"type":"text","text":"🪝 A SwiftUI implementation of React Hooks. Enhances reusability of stateful logic and gives state and lifecycle to function view."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks","kind":"symbol","type":"topic","url":"\/documentation\/hooks"},"doc://Hooks/documentation/Hooks/HookScope/View-Implementations":{"role":"collectionGroup","title":"View Implementations","abstract":[],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/HookScope\/View-Implementations","kind":"article","type":"topic","url":"\/documentation\/hooks\/hookscope\/view-implementations"},"doc://Hooks/documentation/Hooks/HookScope/init(_:)":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a "},{"type":"codeVoice","code":"HookScope"},{"type":"text","text":" that hosts the state of hooks."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/HookScope\/init(_:)","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/hookscope\/init(_:)"},"doc://Hooks/documentation/Hooks/HookScope/body":{"role":"symbol","title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"abstract":[{"type":"text","text":"The content and behavior of the hook scoped view."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/HookScope\/body","kind":"symbol","type":"topic","url":"\/documentation\/hooks\/hookscope\/body"},"doc://Hooks/documentation/Hooks/HookView":{"role":"symbol","title":"HookView","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HookView"}],"abstract":[{"type":"text","text":"A view that wrapper around the "},{"type":"codeVoice","code":"HookScope"},{"type":"text","text":" to use hooks inside."},{"type":"text","text":" "},{"type":"text","text":"The view that is returned from "},{"type":"codeVoice","code":"hookBody"},{"type":"text","text":" will be encluded with "},{"type":"codeVoice","code":"HookScope"},{"type":"text","text":" and be able to use hooks."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/HookView","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HookView"}],"url":"\/documentation\/hooks\/hookview"},"doc://Hooks/documentation/Hooks/HookScope":{"role":"symbol","title":"HookScope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HookScope"}],"abstract":[{"type":"text","text":"A view that hosts the state of hooks."},{"type":"text","text":" "},{"type":"text","text":"All hooks should be called within the evaluation of this view’s body."},{"type":"text","text":" "},{"type":"text","text":"The state of hooks are hosted by this view, and changes in state will cause re-evaluation the body of this view."},{"type":"text","text":" "},{"type":"text","text":"It is possible to limit the scope of re-evaluation by wrapping the views that use hooks in a "},{"type":"codeVoice","code":"HookScope"},{"type":"text","text":"."}],"identifier":"doc:\/\/Hooks\/documentation\/Hooks\/HookScope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HookScope"}],"url":"\/documentation\/hooks\/hookscope"}}}